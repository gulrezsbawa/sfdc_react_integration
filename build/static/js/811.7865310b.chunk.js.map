{"version":3,"file":"static/js/811.7865310b.chunk.js","mappings":"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","sources":["components/Common/overrides.ts","components/Common/Footer.tsx","components/EventMainHeader/styled-components.ts","components/EventMainHeader/EventMainHeader.tsx","components/Miscellaneous/useSettingsLoader.ts","components/Reminder/Setup/styled-components.ts","components/Reminder/Setup/ReminderToggle.tsx","components/Reminder/Setup/EngagementTypesForReminder.tsx","components/Reminder/Setup/Duration.tsx","components/Reminder/Setup/UserTypes.tsx","components/Reminder/Setup/ReminderLoader.tsx","components/Reminder/Setup/Form.tsx","components/Reminder/Setup/Setup.tsx","utils/useBeforeUnload.ts"],"sourcesContent":["import { ButtonOverrides } from '@jifflenow/brightui/button'\n\nexport const successButtonOverrides: ButtonOverrides = {\n  BaseButton: {\n    style: ({ $theme: { sizing } }) => ({\n      marginLeft: sizing.scale600,\n    }),\n  },\n}\n","import { useState, VFC } from 'react'\nimport { FormSpy, useForm } from 'react-final-form'\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl'\nimport { KIND } from '@jifflenow/brightui/button'\nimport { ConfirmationDialog } from 'ui-components/ConfirmationDialog'\nimport { successButtonOverrides } from './overrides'\nimport { FooterContainer, FooterButton } from './styled-components'\n\nconst modalLabels = defineMessages({\n  modalHeader: {\n    defaultMessage: 'Your changes will be lost.',\n    description: 'Modal heading',\n  },\n  modalMessage: {\n    defaultMessage: 'Keep changes?',\n    description: 'Confirmation message',\n  },\n  cancelButtonLabel: {\n    defaultMessage: 'Discard',\n    description: 'Button label',\n  },\n  successButtonLabel: {\n    defaultMessage: 'Keep',\n    description: 'Button label',\n  },\n})\n\nexport const Footer: VFC = () => {\n  const { formatMessage } = useIntl()\n  const { reset } = useForm()\n\n  const [showConfirmation, setShowConfirmation] = useState(false)\n\n  const handleDiscard = () => setShowConfirmation(true)\n\n  const handleDialogClose = () => setShowConfirmation(false)\n\n  const handleFormReset = () => {\n    setShowConfirmation(false)\n    reset()\n  }\n\n  return (\n    <>\n      {showConfirmation && (\n        <ConfirmationDialog\n          heading={formatMessage(modalLabels.modalHeader)}\n          message={formatMessage(modalLabels.modalMessage)}\n          cancelLabel={formatMessage(modalLabels.cancelButtonLabel)}\n          successLabel={formatMessage(modalLabels.successButtonLabel)}\n          onClose={handleDialogClose}\n          onCancel={handleFormReset}\n          onSuccess={handleDialogClose}\n        />\n      )}\n      <FormSpy\n        subscription={{\n          validating: true,\n          submitting: true,\n          dirty: true,\n        }}\n      >\n        {({ validating, submitting, dirty }) =>\n          dirty && (\n            <FooterContainer>\n              <FooterButton\n                type=\"button\"\n                kind={KIND.tertiary}\n                onClick={() => handleDiscard()}\n                data-pendo=\"settings/discard-changes\"\n              >\n                <FormattedMessage\n                  defaultMessage=\"Discard Changes\"\n                  description=\"Button label\"\n                />\n              </FooterButton>\n              <FooterButton\n                type=\"submit\"\n                disabled={submitting || validating}\n                overrides={successButtonOverrides}\n                data-pendo=\"settings/save-changes\"\n              >\n                <FormattedMessage\n                  defaultMessage=\"Save Changes\"\n                  description=\"Button label\"\n                />\n              </FooterButton>\n            </FooterContainer>\n          )\n        }\n      </FormSpy>\n    </>\n  )\n}\n","import { styled, withStyle } from '@jifflenow/brightui'\n\nexport const Root = styled('div', ({ $theme: { sizing, mediaQuery } }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  flexShrink: 0,\n  justifyContent: 'center',\n  marginBottom: sizing.scale100,\n  minHeight: '70px',\n  paddingLeft: sizing.scale1200,\n  paddingRight: sizing.scale600,\n  [mediaQuery.medium]: {\n    paddingLeft: sizing.scale700,\n    paddingRight: sizing.scale500,\n  },\n}))\n\nconst FlexContainer = styled('div', {\n  display: 'flex',\n  alignItems: 'center',\n})\n\nexport const Wrapper = styled('div', ({ $theme: { colors } }) => ({\n  display: 'flex',\n  justifyContent: 'space-between',\n  borderBottomWidth: '1px',\n  borderBottomStyle: 'solid',\n  borderBottomColor: colors.mono300,\n}))\n\nexport const EventDetails = styled('div', ({ $theme: { sizing } }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  marginTop: sizing.scale600,\n}))\n\nexport const StatusWrapper = styled('div', ({ $theme: { sizing } }) => ({\n  marginRight: sizing.scale400,\n}))\n\nexport const EventName = styled(\n  'div',\n  ({ $theme: { typography, colors } }) => ({\n    ...typography.HeadingSmall,\n    color: colors.mono900,\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  })\n)\n\nexport const LocationDetails = withStyle(\n  FlexContainer,\n  ({ $theme: { sizing } }) => ({\n    justifyContent: 'space-between',\n    paddingBottom: sizing.scale0,\n  })\n)\n\nexport const EventInfo = withStyle(FlexContainer, {})\n\nconst StyledText = styled('div', ({ $theme: { typography, colors } }) => ({\n  ...typography.font400,\n  color: colors.mono700,\n}))\n\nexport const EventDates = withStyle(StyledText, ({ $theme: { sizing } }) => ({\n  marginRight: sizing.scale600,\n}))\n\nexport const TimeIconWrapper = withStyle(FlexContainer, {\n  marginRight: '7px',\n})\n\nexport const TimeZone = withStyle(StyledText, {})\n\nexport const LogoWrapper = styled('div', {\n  display: 'flex',\n})\n\nexport const SandboxWrapper = styled('div', ({ $theme: { sizing } }) => ({\n  marginBottom: sizing.scale300,\n  marginRight: sizing.scale600,\n  marginTop: sizing.scale700,\n}))\n\nexport const SandboxText = styled(\n  'div',\n  ({ $theme: { typography, colors, sizing } }) => ({\n    ...typography.Caption2,\n    backgroundColor: colors.warning50,\n    borderColor: colors.warning,\n    borderRadius: sizing.scale100,\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    fontSize: sizing.scale400,\n    paddingBottom: sizing.scale100,\n    paddingLeft: sizing.scale300,\n    paddingRight: sizing.scale300,\n    paddingTop: sizing.scale100,\n  })\n)\n","import { VFC, useMemo } from 'react'\nimport { DateTime } from 'luxon'\nimport { FormattedMessage } from 'react-intl'\nimport { useEventLocation } from 'providers/LocationProvider'\nimport { EventStatus } from 'components/Events'\nimport { formatDateRange, formatToStartOfTheDay } from 'utils/dates'\nimport { TimeZoneOutlined } from '@jifflenow/brightui/icon'\nimport { Logo } from 'components/Common/Logo'\nimport {\n  Root,\n  EventDetails,\n  LocationDetails,\n  EventName,\n  StatusWrapper,\n  TimeZone,\n  EventDates,\n  TimeIconWrapper,\n  EventInfo,\n  Wrapper,\n  LogoWrapper,\n  SandboxText,\n  SandboxWrapper,\n} from './styled-components'\n\nexport const EventMainHeader: VFC = () => {\n  const {\n    attributes: {\n      displayName,\n      filterStatus,\n      mode,\n      timeZone,\n      startDate,\n      endDate,\n      address,\n    },\n  } = useEventLocation().location!\n\n  const eventTimeZone = useMemo(\n    () => (timeZone ? DateTime.local().setZone(timeZone).offsetNameLong : ''),\n    [timeZone]\n  )\n\n  const urlPath = window.location.pathname\n  const sandboxInstance =\n    urlPath.includes('sandbox-') || urlPath.includes('staging-')\n\n  return (\n    <Wrapper>\n      <Root>\n        <EventDetails>\n          <StatusWrapper>\n            <EventStatus status={filterStatus} mode={mode} />\n          </StatusWrapper>\n          <EventName>{displayName}</EventName>\n        </EventDetails>\n        <LocationDetails>\n          <EventInfo>\n            <EventDates>\n              {`${formatDateRange(\n                formatToStartOfTheDay(startDate),\n                formatToStartOfTheDay(endDate)\n              )} | ${address}`}\n            </EventDates>\n            <TimeIconWrapper>\n              <TimeZoneOutlined />\n            </TimeIconWrapper>\n            <TimeZone>{eventTimeZone}</TimeZone>\n          </EventInfo>\n        </LocationDetails>\n      </Root>\n      <LogoWrapper>\n        {sandboxInstance && (\n          <SandboxWrapper>\n            <SandboxText>\n              <FormattedMessage\n                defaultMessage=\"You are currently using the sandbox instance.{br}Intended for use with Test Data only.\"\n                description=\"Warning text\"\n                values={{\n                  br: <br />,\n                }}\n              />\n            </SandboxText>\n          </SandboxWrapper>\n        )}\n        <Logo />\n      </LogoWrapper>\n    </Wrapper>\n  )\n}\n","import { useEffect, useRef } from 'react'\n\nexport const useSettingsLoader = (loading: boolean) => {\n  const shown = useRef(false)\n\n  useEffect(() => {\n    if (!loading && !shown.current) {\n      shown.current = true\n    }\n  }, [loading])\n\n  return loading && !shown.current\n}\n","import { styled } from '@jifflenow/brightui'\nimport { FormControl } from '@jifflenow/brightui/form-control'\n\nexport const StyledForm = styled('form', {\n  display: 'flex',\n  flexDirection: 'column',\n  height: 'calc(100vh - 86px)',\n  overflow: 'auto',\n})\n\nexport const Body = styled('div', {\n  display: 'flex',\n  flexDirection: 'column',\n  flexGrow: 1,\n})\n\nexport const Container = styled(\n  'div',\n  ({ $theme: { mediaQuery, sizing } }) => ({\n    width: '100%',\n    paddingLeft: sizing.scale600,\n    paddingRight: sizing.scale600,\n    paddingTop: sizing.scale2400,\n    flexGrow: 1,\n    [mediaQuery.medium]: {\n      paddingLeft: '40px',\n      paddingRight: '112px',\n      paddingTop: sizing.scale800,\n    },\n  })\n)\n\nexport const FieldLabelContainer = styled('span', {})\n\nexport const FieldLabel = styled<{ $bold?: boolean }, 'span'>(\n  'span',\n  ({ $theme: { colors, typography } }) => ({\n    ...typography.HeadingXSmall,\n    color: colors.mono900,\n  })\n)\n\nexport const FieldToggleWrapper = styled<{ $error: boolean }, 'div'>(\n  'div',\n  ({ $error, $theme: { sizing } }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingTop: $error ? sizing.scale100 : sizing.scale650,\n    paddingBottom: sizing.scale650,\n  })\n)\n\nexport const GenericError = styled(\n  'div',\n  ({ $theme: { colors, sizing, typography } }) => ({\n    ...typography.LabelSmall,\n    color: colors.negative700,\n    marginTop: sizing.scale100,\n  })\n)\n\nexport const ToggleContainer = styled('div', ({ $theme: { sizing } }) => ({\n  marginRight: sizing.scale400,\n  marginLeft: sizing.scale400,\n}))\n\nexport const FormControlStyled = styled(\n  FormControl,\n  ({ $theme: { sizing } }) => ({\n    marginBottom: sizing.scale500,\n    width: '420px',\n  })\n)\n\nexport const CheckboxWrapper = styled('div', ({ $theme: { sizing } }) => ({\n  paddingRight: sizing.scale800,\n}))\n\nexport const CheckboxLabel = styled('div', ({ $theme: { typography } }) => ({\n  ...typography.Paragraph2,\n}))\n\nexport const CheckboxContainer = styled('div', ({ $theme: { sizing } }) => ({\n  display: 'flex',\n  marginTop: sizing.scale300,\n}))\n\nexport const ReminderConfig = styled('div', ({ $theme: { sizing } }) => ({\n  marginTop: sizing.scale900,\n}))\n\nexport const Wrapper = styled('div', ({ $theme: { sizing } }) => ({\n  marginBottom: sizing.scale900,\n}))\n\nexport const Label = styled('div', ({ $theme: { typography } }) => ({\n  ...typography.Subtitle1,\n}))\n\nexport const Error = styled('div', ({ $theme: { typography, colors } }) => ({\n  ...typography.Caption1,\n  color: colors.negative,\n}))\n\nexport const ErrorWrapper = styled('div', ({ $theme: { sizing } }) => ({\n  marginTop: sizing.scale300,\n}))\n","import { ChangeEvent, VFC } from 'react'\nimport { Field } from 'react-final-form'\nimport { Toggle } from '@jifflenow/brightui/toggle'\nimport {\n  FieldLabel,\n  FieldLabelContainer,\n  FieldToggleWrapper,\n  GenericError,\n  ToggleContainer,\n} from './styled-components'\nimport { ReminderToggleProps } from './types'\n\nexport const ReminderToggle: VFC<ReminderToggleProps> = ({\n  label,\n  name,\n  children,\n}) => (\n  <Field<string>\n    name={name}\n    render={({ input: { value, onChange }, meta: { error } }) => (\n      <>\n        {error && <GenericError>{error}</GenericError>}\n        <FieldToggleWrapper $error={error}>\n          <FieldLabelContainer>\n            <FieldLabel>{label}</FieldLabel>\n          </FieldLabelContainer>\n\n          <ToggleContainer>\n            <Toggle\n              name={name}\n              ariaLabel={label}\n              checked={Boolean(value)}\n              onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                onChange(e.target.checked)\n              }\n            />\n          </ToggleContainer>\n        </FieldToggleWrapper>\n        {value && children}\n      </>\n    )}\n  />\n)\n","import { useMemo, VFC } from 'react'\nimport { useFetchEngagementTypeSettings } from 'gql'\nimport { defineMessages, useIntl } from 'react-intl'\nimport { Option, Select, Value } from '@jifflenow/brightui/select'\nimport { Field, Validation } from 'ui-components/Field'\nimport { FormControlStyled, Label, Error } from './styled-components'\n\nconst messages = defineMessages({\n  engagementTypesLabel: {\n    defaultMessage: 'Select engagement types',\n    description: 'Field label',\n  },\n  searchPlaceholder: {\n    defaultMessage: 'Select engagement by name',\n    description: 'Field label',\n  },\n  engagementTypeRequired: {\n    defaultMessage: 'Atleast 1 engagement type is required',\n    description: 'Field validation error message',\n  },\n})\n\nexport const EngagementTypesForReminder: VFC = () => {\n  const { formatMessage } = useIntl()\n\n  const { fetchEngagementTypes } = useFetchEngagementTypeSettings()\n\n  const options = useMemo(\n    () =>\n      (\n        fetchEngagementTypes?.map(({ id, name, displayOrder }) => ({\n          id,\n          label: name,\n          displayOrder,\n        })) ?? []\n      ).sort((a, b) => a.displayOrder - b.displayOrder),\n    [fetchEngagementTypes]\n  )\n\n  return (\n    <Field\n      name=\"engagementTypes\"\n      validations={[Validation.REQUIRED]}\n      format={(value: Option[] | undefined) => value ?? []}\n      parse={(value: Option[]) => (value.length ? value : undefined)}\n      render={({ input, meta: { touched, error } }) => (\n        <FormControlStyled\n          label={<Label>{formatMessage(messages.engagementTypesLabel)}</Label>}\n          caption={\n            touched &&\n            error && (\n              <Error>{formatMessage(messages.engagementTypeRequired)}</Error>\n            )\n          }\n        >\n          <Select\n            {...input}\n            id=\"engagementType\"\n            multi\n            options={options}\n            backspaceClearsInputValue\n            searchable\n            placeholder={formatMessage(messages.searchPlaceholder)}\n            onChange={({ value }: { value: Value[] }) => input.onChange(value)}\n          />\n        </FormControlStyled>\n      )}\n    />\n  )\n}\n","import { VFC, useState } from 'react'\nimport { defineMessages, useIntl } from 'react-intl'\nimport { Option, Select, Value } from '@jifflenow/brightui/select'\nimport { Field, Validation } from 'ui-components/Field'\nimport { Options } from './types'\nimport { FormControlStyled, Label, Error } from './styled-components'\n\nconst messages = defineMessages({\n  label: {\n    defaultMessage:\n      'When to send the auto reminders before the start of meeting?',\n    description: 'Field label',\n  },\n  placeholder: {\n    defaultMessage: 'Please select',\n    description: 'Field label',\n  },\n  daysBefore: {\n    defaultMessage:\n      '{dayCount} {dayCount, plural, one {day} other {days}} before',\n    description: 'Label text',\n  },\n  daysBeforeRequired: {\n    defaultMessage: 'Atleast 1 reminder is required',\n    description: 'Field validation error message',\n  },\n})\n\nexport const Duration: VFC = () => {\n  const { formatMessage } = useIntl()\n\n  const daysBefore: Options[] = [...Array(7)].map((_, index) => ({\n    label: formatMessage(messages.daysBefore, {\n      dayCount: index + 1,\n    }),\n    id: `${index + 1}`,\n  }))\n\n  const [options, setOptions] = useState<Options[]>(daysBefore)\n\n  return (\n    <Field\n      name=\"daysBefore\"\n      format={(value: string[]) =>\n        daysBefore.filter(item => value?.includes(item.id))\n      }\n      validations={[Validation.REQUIRED]}\n      render={({ input, meta: { error } }) => (\n        <FormControlStyled\n          label={<Label>{formatMessage(messages.label)}</Label>}\n          caption={\n            error && <Error>{formatMessage(messages.daysBeforeRequired)}</Error>\n          }\n        >\n          <Select\n            {...input}\n            onFocus={input.onFocus}\n            onBlur={input.onBlur}\n            id=\"daysBefore\"\n            multi\n            options={options}\n            backspaceClearsInputValue\n            searchable\n            placeholder={formatMessage(messages.placeholder)}\n            onInputChange={(e: any) => setOptions(e.target.value)}\n            onChange={({ value }: { value: Value[] }) =>\n              input.onChange(value.map((item: Option) => item.id))\n            }\n          />\n        </FormControlStyled>\n      )}\n    />\n  )\n}\n","import { VFC, ChangeEvent } from 'react'\nimport { defineMessages, useIntl } from 'react-intl'\nimport { Field } from 'ui-components/Field'\nimport { Checkbox } from '@jifflenow/brightui/checkbox'\nimport { useFormState } from 'react-final-form'\nimport { Options } from './types'\nimport {\n  Label,\n  Error,\n  CheckboxWrapper,\n  CheckboxLabel,\n  CheckboxContainer,\n  ErrorWrapper,\n} from './styled-components'\n\nconst messages = defineMessages({\n  label: {\n    defaultMessage: 'Who will get the reminders?',\n    description: 'Field label',\n  },\n  userTypeRequired: {\n    defaultMessage: 'Atleast 1 user type is required',\n    description: 'Field validation error message',\n  },\n})\n\nconst userTypeList: Options[] = [\n  { id: 'internal', label: 'Internal Attendees' },\n  { id: 'external', label: 'External Attendees' },\n]\n\nexport const UserTypes: VFC = () => {\n  const { formatMessage } = useIntl()\n\n  const {\n    values: { userType },\n    touched,\n    submitSucceeded,\n  } = useFormState()\n\n  return (\n    <>\n      <Label>{formatMessage(messages.label)}</Label>\n      <CheckboxContainer>\n        {userTypeList.map((item, index) => (\n          <Field<string>\n            key={item.id}\n            name={`userType[${index}]`}\n            type=\"checkbox\"\n            render={({ input }) => (\n              <CheckboxWrapper>\n                <Checkbox\n                  {...input}\n                  checked={userType.includes(item.id)}\n                  onChange={({ target }: ChangeEvent<HTMLInputElement>) => {\n                    input.onChange(target.checked ? item.id : null)\n                  }}\n                >\n                  <CheckboxLabel>{item.label}</CheckboxLabel>\n                </Checkbox>\n              </CheckboxWrapper>\n            )}\n          />\n        ))}\n      </CheckboxContainer>\n      {(touched?.['userType[0]'] ||\n        touched?.['userType[1]'] ||\n        submitSucceeded) &&\n        !userType.filter(Boolean).length && (\n          <ErrorWrapper>\n            <Error>{formatMessage(messages.userTypeRequired)}</Error>\n          </ErrorWrapper>\n        )}\n    </>\n  )\n}\n","import ContentLoader from 'react-content-loader'\nimport { useStyletron } from '@jifflenow/brightui'\n\nexport const ReminderLoader = () => {\n  const [, theme] = useStyletron()\n  const loaderOptions = {\n    speed: 2,\n    primaryColor: theme.colors.mono200,\n    secondaryColor: theme.colors.mono300,\n  }\n\n  return (\n    <ContentLoader\n      width=\"1000\"\n      height=\"610\"\n      viewBox=\"0 0 1000 600\"\n      {...loaderOptions}\n    >\n      <rect y=\"12\" x=\"0\" width=\"138\" height=\"21\" />\n      <rect y=\"14\" x=\"955\" width=\"36\" height=\"21\" rx=\"12\" ry=\"12\" />\n    </ContentLoader>\n  )\n}\n","import { useEffect, VFC } from 'react'\nimport { Prompt } from 'react-router-dom'\nimport { defineMessages, useIntl } from 'react-intl'\nimport { Footer } from 'components/Common/Footer'\nimport { useSettingsLoader } from 'components/Miscellaneous/useSettingsLoader'\nimport { useBeforeUnload } from 'utils/useBeforeUnload'\nimport { ReminderToggle } from './ReminderToggle'\nimport {\n  Body,\n  StyledForm,\n  Container,\n  ReminderConfig,\n  Wrapper,\n} from './styled-components'\nimport { FormProps } from './types'\nimport { EngagementTypesForReminder } from './EngagementTypesForReminder'\nimport { Duration } from './Duration'\nimport { UserTypes } from './UserTypes'\nimport { ReminderLoader } from './ReminderLoader'\n\nconst LoadingShimmer = () => (\n  <Body>\n    <Container>\n      <ReminderLoader />\n    </Container>\n  </Body>\n)\n\nconst messages = defineMessages({\n  title: {\n    defaultMessage: 'Meeting Reminders',\n    description: 'Section title',\n  },\n  promptMessage: {\n    defaultMessage: 'Are you sure you want to leave?',\n    description: 'Prompt message',\n  },\n})\n\nexport const Form: VFC<FormProps> = ({ handleSubmit, dirty, loading }) => {\n  const { formatMessage } = useIntl()\n  const unload = useBeforeUnload()\n  const showLoading = useSettingsLoader(loading)\n\n  useEffect(() => {\n    unload(dirty)\n  }, [dirty, unload])\n\n  return (\n    <StyledForm onSubmit={handleSubmit} noValidate>\n      <Prompt when={dirty} message={formatMessage(messages.promptMessage)} />\n      {showLoading ? (\n        <LoadingShimmer />\n      ) : (\n        <Body>\n          <Container>\n            <ReminderToggle\n              label={formatMessage(messages.title)}\n              name={'enableMeetingReminder'}\n            >\n              <ReminderConfig>\n                <Wrapper>\n                  <UserTypes />\n                </Wrapper>\n                <Wrapper>\n                  <Duration />\n                </Wrapper>\n                <Wrapper>\n                  <EngagementTypesForReminder />\n                </Wrapper>\n              </ReminderConfig>\n            </ReminderToggle>\n          </Container>\n          <Footer />\n        </Body>\n      )}\n    </StyledForm>\n  )\n}\n","import { useMemo, useState } from 'react'\nimport { Form as FinalForm } from 'react-final-form'\nimport createFocusDecorator from 'final-form-focus'\nimport { Config, FORM_ERROR, setIn } from 'final-form'\nimport { defineMessages, useIntl } from 'react-intl'\nimport { ModalSpinner } from '@jifflenow/brightui/modal-spinner'\nimport { EventMainHeader } from 'components/EventMainHeader'\nimport {\n  mutateBulkUpsertLocationConfigsSettings,\n  mutateReminderSettings,\n  useApolloClient,\n  useEventConfigQuery,\n  useGetReminderSettings,\n} from 'gql'\nimport { useEventLocation } from 'providers/LocationProvider'\nimport { showErrorToast, showSuccessToast } from 'utils/toast'\nimport { ErrorPage } from 'ui-components/ErrorPage'\nimport { AllowedUserTypes } from 'gql/types/globalTypes'\nimport { setReminderVariables } from 'gql/types/setReminder'\nimport { bulkFetchLocationConfigsByName_bulkFetchLocationConfigsByName_configValue_CustomNameValue as CustomNameValue } from 'gql/types/bulkFetchLocationConfigsByName'\nimport { FormValues } from './types'\nimport { Form } from './Form'\n\ntype ErrorObject = Record<string, FormValues>\n\nconst focusDecorator = createFocusDecorator<FormValues>()\n\nconst messages = defineMessages({\n  genericError: {\n    defaultMessage: 'Something is not right. Please retry.',\n    description: 'Error message',\n  },\n  successMessage: {\n    defaultMessage: 'Your changes have been saved successfully',\n    description: 'Success message',\n  },\n})\n\nexport const Setup = () => {\n  const { id: currentLocationUuid } = useEventLocation().location!\n  const [showLoader, setShowLoader] = useState(false)\n  const { formatMessage } = useIntl()\n  const client = useApolloClient()\n\n  const {\n    bulkFetchLocationConfigsByName = [],\n    refetch: refetchGetEngagementTypeSettings,\n    loading: configLoading,\n  } = useEventConfigQuery({\n    variables: {\n      names: ['auto_remind'],\n    },\n    context: {\n      headers: { 'X-Location-Uuid': currentLocationUuid },\n    },\n    fetchPolicy: 'cache-and-network',\n    onError: () => showErrorToast(formatMessage(messages.genericError)),\n  })\n\n  const {\n    loading,\n    getReminderSetting: { userType, daysBefore, engagementTypes } = {},\n    error,\n    refetch,\n  } = useGetReminderSettings({\n    notifyOnNetworkStatusChange: true,\n  })\n\n  const auto_remind_data = bulkFetchLocationConfigsByName.find(\n    item => item.configName === 'auto_remind'\n  )\n\n  const enableMeetingReminder =\n    (auto_remind_data?.configValue as CustomNameValue)?.value === 'true'\n\n  const getUserType = (userType?: string) => {\n    switch (userType) {\n      case 'all':\n        return ['internal', 'external']\n      case 'internal':\n        return ['internal', undefined]\n      case 'external':\n        return [undefined, 'external']\n      default:\n        return ['']\n    }\n  }\n  const initialValues = useMemo(\n    () => ({\n      enableMeetingReminder,\n      userType: getUserType(userType),\n      daysBefore: daysBefore?.length ? daysBefore : ['1'],\n      engagementTypes: engagementTypes?.map(item => ({\n        id: item.id,\n        label: item.name,\n      })),\n    }),\n    [daysBefore, engagementTypes, userType, enableMeetingReminder]\n  )\n\n  const handleSubmit: Config<FormValues>['onSubmit'] = async values => {\n    const userTypes = values.userType?.filter(Boolean)\n    if (userTypes?.length || !values.enableMeetingReminder) {\n      try {\n        setShowLoader(true)\n        const variables: setReminderVariables = {\n          ...(values.enableMeetingReminder && {\n            daysBefore: values.daysBefore,\n            engagementTypeIds: values.engagementTypes?.map(item => item.id),\n            userType: (userTypes?.length === 2\n              ? 'all'\n              : userTypes?.[0]) as AllowedUserTypes,\n          }),\n          configsToUpdate: [\n            {\n              configName: auto_remind_data?.configName!,\n              configValue: {\n                display_name: (auto_remind_data?.configValue as CustomNameValue)\n                  .display_name,\n                value: values.enableMeetingReminder.toString(),\n              },\n            },\n          ],\n        }\n        if (values.enableMeetingReminder) {\n          await mutateReminderSettings(client, {\n            variables,\n          })\n        } else {\n          await mutateBulkUpsertLocationConfigsSettings(client, {\n            variables,\n          })\n        }\n\n        setShowLoader(false)\n        showSuccessToast(formatMessage(messages.successMessage))\n        refetchGetEngagementTypeSettings()\n        refetch()\n\n        return undefined\n      } catch (error) {\n        setShowLoader(false)\n        showErrorToast(formatMessage(messages.genericError))\n        return { [FORM_ERROR]: { code: 'GenericError' } }\n      }\n    }\n\n    return undefined\n  }\n\n  if (error) {\n    return <ErrorPage onButtonClick={() => refetch()} />\n  }\n\n  const validation = (values: FormValues) => {\n    let errors = {} as ErrorObject\n    if (values.enableMeetingReminder) {\n      if (\n        !values.userType?.length ||\n        values.userType?.filter(item => item === undefined).length === 2\n      ) {\n        errors = setIn(errors, 'userType', 'Required') as ErrorObject\n      }\n      if (!values.daysBefore?.length) {\n        errors = setIn(errors, 'daysBefore', 'Required') as ErrorObject\n      }\n      if (!values.engagementTypes?.length) {\n        errors = setIn(errors, 'engagementTypes', 'Required') as ErrorObject\n      }\n    }\n\n    return errors\n  }\n\n  return (\n    <>\n      {showLoader && <ModalSpinner />}\n      <EventMainHeader />\n      {engagementTypes && (\n        <FinalForm<FormValues>\n          onSubmit={handleSubmit}\n          initialValues={initialValues}\n          validate={validation}\n          decorators={[focusDecorator]}\n          render={props => (\n            <Form {...props} loading={loading || configLoading} />\n          )}\n        />\n      )}\n    </>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nexport const useBeforeUnload = () => {\n  const [showBeforeUnloadPopup, setShowBeforeUnloadPopup] = useState(false)\n\n  useEffect(() => {\n    const handler = (event: BeforeUnloadEvent) => {\n      event.preventDefault()\n      event.returnValue = ''\n    }\n\n    if (showBeforeUnloadPopup) {\n      window.addEventListener('beforeunload', handler)\n    } else {\n      window.removeEventListener('beforeunload', handler)\n    }\n\n    return () => {\n      window.removeEventListener('beforeunload', handler)\n    }\n  }, [showBeforeUnloadPopup])\n\n  return setShowBeforeUnloadPopup\n}\n"],"names":["successButtonOverrides","BaseButton","style","marginLeft","$theme","sizing","scale600","modalLabels","defineMessages","modalHeader","defaultMessage","modalMessage","cancelButtonLabel","successButtonLabel","Footer","formatMessage","useIntl","reset","useForm","useState","showConfirmation","setShowConfirmation","handleDialogClose","ConfirmationDialog","heading","message","cancelLabel","successLabel","onClose","onCancel","onSuccess","subscription","validating","submitting","dirty","type","kind","KIND","onClick","disabled","overrides","Root","styled","mediaQuery","display","flexDirection","flexShrink","justifyContent","marginBottom","scale100","minHeight","paddingLeft","scale1200","paddingRight","medium","scale700","scale500","FlexContainer","alignItems","Wrapper","borderBottomWidth","borderBottomStyle","borderBottomColor","colors","mono300","EventDetails","marginTop","StatusWrapper","marginRight","scale400","EventName","typography","HeadingSmall","color","mono900","textOverflow","whiteSpace","LocationDetails","withStyle","paddingBottom","scale0","EventInfo","StyledText","font400","mono700","EventDates","TimeIconWrapper","TimeZone","LogoWrapper","SandboxWrapper","scale300","SandboxText","Caption2","backgroundColor","warning50","borderColor","warning","borderRadius","borderStyle","borderWidth","fontSize","paddingTop","EventMainHeader","useEventLocation","location","attributes","displayName","filterStatus","mode","timeZone","startDate","endDate","address","eventTimeZone","useMemo","DateTime","setZone","offsetNameLong","urlPath","window","pathname","sandboxInstance","includes","status","formatDateRange","formatToStartOfTheDay","values","br","Logo","useSettingsLoader","loading","shown","useRef","useEffect","current","StyledForm","height","overflow","Body","flexGrow","Container","width","scale2400","scale800","FieldLabelContainer","FieldLabel","HeadingXSmall","FieldToggleWrapper","$error","scale650","GenericError","LabelSmall","negative700","ToggleContainer","FormControlStyled","FormControl","CheckboxWrapper","CheckboxLabel","Paragraph2","CheckboxContainer","ReminderConfig","scale900","Label","Subtitle1","Error","Caption1","negative","ErrorWrapper","ReminderToggle","label","name","children","render","input","value","onChange","error","meta","ariaLabel","checked","Boolean","e","target","messages","engagementTypesLabel","searchPlaceholder","engagementTypeRequired","EngagementTypesForReminder","fetchEngagementTypes","useFetchEngagementTypeSettings","options","map","id","displayOrder","sort","a","b","Field","validations","Validation","format","parse","length","undefined","touched","caption","multi","backspaceClearsInputValue","searchable","placeholder","daysBefore","daysBeforeRequired","Duration","Array","_","index","dayCount","setOptions","filter","item","onFocus","onBlur","onInputChange","userTypeRequired","userTypeList","UserTypes","useFormState","userType","submitSucceeded","ReminderLoader","useStyletron","theme","loaderOptions","speed","primaryColor","mono200","secondaryColor","viewBox","y","x","rx","ry","LoadingShimmer","title","promptMessage","Form","handleSubmit","unload","useBeforeUnload","showLoading","onSubmit","noValidate","when","focusDecorator","createFocusDecorator","genericError","successMessage","Setup","currentLocationUuid","showLoader","setShowLoader","client","useApolloClient","useEventConfigQuery","variables","names","context","headers","fetchPolicy","onError","showErrorToast","bulkFetchLocationConfigsByName","refetchGetEngagementTypeSettings","refetch","configLoading","useGetReminderSettings","notifyOnNetworkStatusChange","getReminderSetting","engagementTypes","auto_remind_data","find","configName","enableMeetingReminder","configValue","getUserType","initialValues","userTypes","engagementTypeIds","configsToUpdate","display_name","toString","mutateReminderSettings","mutateBulkUpsertLocationConfigsSettings","showSuccessToast","FORM_ERROR","code","ErrorPage","onButtonClick","validate","errors","setIn","decorators","props","showBeforeUnloadPopup","setShowBeforeUnloadPopup","handler","event","preventDefault","returnValue","addEventListener","removeEventListener"],"sourceRoot":""}