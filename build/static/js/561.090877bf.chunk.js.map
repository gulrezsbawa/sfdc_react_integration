{"version":3,"file":"static/js/561.090877bf.chunk.js","mappings":"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","sources":["components/Localization/LocalizationToggle.tsx","components/Localization/LocalizationHeader.tsx","components/Localization/styled-components.ts","components/Localization/LanguageList.tsx","components/Localization/LoadingShimmer.tsx","components/Localization/overrides.ts","components/Localization/Import.tsx","components/Localization/Export.tsx","components/Localization/Localization.tsx"],"sourcesContent":["import { VFC } from 'react'\nimport { defineMessages, useIntl } from 'react-intl'\nimport { Toggle } from '@jifflenow/brightui/toggle'\nimport { ToggleProps } from './types'\n\nconst message = defineMessages({\n  localization: {\n    defaultMessage: 'Enable Localization',\n    description: 'localization toggle aria label',\n  },\n})\n\nexport const LocalizationToggle: VFC<ToggleProps> = ({ checked, onChange }) => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <Toggle\n      name=\"localisation\"\n      ariaLabel={formatMessage(message.localization)}\n      checked={checked}\n      onChange={onChange}\n    />\n  )\n}\n","import { VFC } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport {\n  Container,\n  RightContainer,\n  Root,\n  Title,\n  PageHint,\n} from 'components/EngagementTypes'\nimport { LocalizationToggle } from './LocalizationToggle'\nimport { ToggleProps } from './types'\n\nexport const LocalizationHeader: VFC<ToggleProps> = props => (\n  <Root>\n    <Container>\n      <Title>\n        <FormattedMessage\n          defaultMessage=\"Localization\"\n          description=\"Section title\"\n        />\n      </Title>\n      <PageHint>\n        <FormattedMessage\n          defaultMessage=\"Localization allows your eMeet inbound request page to support multiple languages\"\n          description=\"Section sub title\"\n        />\n      </PageHint>\n    </Container>\n    <RightContainer>\n      <LocalizationToggle {...props} />\n    </RightContainer>\n  </Root>\n)\n","import { styled } from '@jifflenow/brightui'\nimport {\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n} from '@jifflenow/brightui/icon'\n\nexport const FieldToggleWrapper = styled('div', ({ $theme: { sizing } }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  paddingTop: sizing.scale600,\n  paddingBottom: sizing.scale600,\n}))\n\nexport const Root = styled('header', ({ $theme: { sizing } }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  paddingLeft: sizing.scale800,\n  paddingRight: sizing.scale800,\n  paddingTop: sizing.scale200,\n  paddingBottom: sizing.scale200,\n}))\n\nexport const Container = styled('header', ({ $theme: { sizing } }) => ({\n  paddingLeft: sizing.scale800,\n  paddingRight: sizing.scale800,\n}))\n\nexport const FieldSeparator = styled('div', ({ $theme: { colors } }) => ({\n  borderBottomColor: colors.mono300,\n  borderBottomStyle: 'solid',\n  borderBottomWidth: '1px',\n}))\n\nexport const FieldLabelContainer = styled('span', ({ $theme: { sizing } }) => ({\n  marginRight: sizing.scale400,\n  marginLeft: sizing.scale400,\n}))\n\nexport const FieldLabel = styled(\n  'span',\n  ({ $theme: { colors, typography } }) => ({\n    ...typography.Paragraph2,\n    color: colors.mono900,\n  })\n)\n\nexport const TableHeader = styled(\n  'div',\n  ({ $theme: { typography, colors } }) => ({\n    ...typography.LabelLarge,\n    color: colors.mono800,\n    marginBottom: 0,\n  })\n)\n\nexport const ExportContainer = styled('div', ({ $theme: { sizing } }) => ({\n  display: 'flex',\n  justifyContent: 'flex-end',\n  paddingTop: sizing.scale750,\n  paddingLeft: sizing.scale800,\n  paddingRight: sizing.scale800,\n}))\n\nexport const HiddenInput = styled('input', { display: 'none' })\n\nexport const MessageRoot = styled('div', () => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n}))\n\nexport const Text = styled('div', ({ $theme: { typography } }) => ({\n  ...typography.LabelSmall,\n}))\n\nexport const IconSuccess = styled(\n  CheckCircleOutlined,\n  ({ $theme: { sizing, colors } }) => ({\n    color: colors.positive,\n    backgroundColor: colors.positive50,\n    borderRadius: sizing.scale400,\n  })\n)\n\nexport const IconFailure = styled(\n  CloseCircleOutlined,\n  ({ $theme: { sizing, colors } }) => ({\n    color: colors.negative,\n    backgroundColor: colors.negative50,\n    borderRadius: sizing.scale400,\n  })\n)\n","import { VFC } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { Toggle } from '@jifflenow/brightui/toggle'\nimport { ToggleContainer } from '../EngagementTypes/EngagementTypeEdit/common/styled-components'\nimport {\n  FieldToggleWrapper,\n  Root,\n  Container,\n  FieldSeparator,\n  FieldLabel,\n  FieldLabelContainer,\n  TableHeader,\n} from './styled-components'\nimport { LanguageToggleProps } from './types'\n\n// TODO: remove this suppression after ts update since issue is fixed in latest version.\n// https://github.com/microsoft/TypeScript/pull/45647\n// https://github.com/microsoft/TypeScript/pull/44022\n// @ts-expect-error: suppressed in interest of time.\nconst languageNames = new Intl.DisplayNames([], { type: 'language' })\n\nconst Language: VFC<{\n  language: string\n  checked: boolean\n  disabled: boolean\n  onChange: (language: string, add: boolean) => void\n}> = ({ language, checked, disabled, onChange }) => {\n  const label = languageNames.of(language)\n\n  return (\n    <FieldToggleWrapper>\n      <FieldLabelContainer>\n        <FieldLabel>\n          {language === 'en' ? label : `${label} (${language})`}\n        </FieldLabel>\n      </FieldLabelContainer>\n      <Root>\n        <ToggleContainer>\n          {language === 'en' ? (\n            <FieldLabel>\n              <FormattedMessage\n                defaultMessage=\"Default On\"\n                description=\"Switched on by default\"\n              />\n            </FieldLabel>\n          ) : (\n            <Toggle\n              name={language}\n              ariaLabel={label}\n              checked={checked}\n              onChange={(e: any) => onChange(language, e.target.checked)}\n              disabled={disabled}\n            />\n          )}\n        </ToggleContainer>\n      </Root>\n    </FieldToggleWrapper>\n  )\n}\n\nexport const LanguageList: VFC<LanguageToggleProps> = ({\n  localizationData,\n  onChange,\n}) => {\n  const {\n    supportedLocales,\n    enabledLocales,\n    enableLocalisation,\n  } = localizationData\n\n  return (\n    <Container>\n      <TableHeader>\n        <FormattedMessage\n          defaultMessage=\"Language\"\n          description=\"Langage column header\"\n        />\n      </TableHeader>\n      {supportedLocales?.map((language, index) => {\n        const checked = enabledLocales.indexOf(language) !== -1\n\n        return (\n          <div key={index}>\n            <Language\n              language={language}\n              checked={checked}\n              disabled={!enableLocalisation}\n              onChange={onChange}\n            />\n            <FieldSeparator />\n          </div>\n        )\n      })}\n    </Container>\n  )\n}\n","import ContentLoader from 'react-content-loader'\nimport { useStyletron, styled } from '@jifflenow/brightui'\nimport { Container } from '../EngagementTypes/EngagementTypeEdit/common'\n\nconst Body = styled('div', {\n  display: 'flex',\n  flexDirection: 'column',\n  flexGrow: 1,\n})\n\nexport const LoadingShimmer = () => {\n  const [, theme] = useStyletron()\n  const loaderOptions = {\n    speed: 2,\n    primaryColor: theme.colors.mono200,\n    secondaryColor: theme.colors.mono300,\n  }\n\n  return (\n    <Body>\n      <Container>\n        <ContentLoader\n          width=\"1000\"\n          height=\"600\"\n          viewBox=\"0 0 1000 600\"\n          {...loaderOptions}\n        >\n          <rect y=\"25\" x=\"0\" width=\"1000\" height=\"50\" />\n\n          <rect y=\"150\" x=\"0\" width=\"1000\" height=\"30\" />\n\n          <rect y=\"285\" x=\"0\" width=\"230\" height=\"13\" />\n          <rect y=\"280\" x=\"955\" width=\"42\" height=\"24\" rx=\"12\" ry=\"12\" />\n          <rect y=\"330\" x=\"0\" width=\"1000\" height=\"1\" />\n\n          <rect y=\"355\" x=\"0\" width=\"230\" height=\"13\" />\n          <rect y=\"350\" x=\"955\" width=\"42\" height=\"24\" rx=\"12\" ry=\"12\" />\n          <rect y=\"400\" x=\"0\" width=\"1000\" height=\"1\" />\n        </ContentLoader>\n      </Container>\n    </Body>\n  )\n}\n","import { ButtonOverrides } from '@jifflenow/brightui/button'\nimport { ColumnOverrides } from '@jifflenow/brightui/table-semantic'\n\nexport const buttonOverrides: ButtonOverrides = {\n  BaseButton: {\n    style: ({ $theme: { sizing } }) => ({\n      minWidth: '122px',\n      marginRight: sizing.scale300,\n      marginBottom: sizing.scale300,\n    }),\n  },\n}\n\nexport const viewButtonOverride: ButtonOverrides = {\n  BaseButton: {\n    style: ({ $theme: { sizing } }) => ({\n      minWidth: '70px',\n      height: '24px',\n      marginLeft: sizing.scale400,\n    }),\n  },\n}\n\nexport const statusColumnOverride: ColumnOverrides = {\n  TableHeadCell: { style: { width: '20px' } },\n  TableBodyCell: { style: { width: '20px' } },\n}\n","import { createRef, useState, VFC } from 'react'\nimport { useMutation } from 'react-query'\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl'\nimport { Button, KIND } from '@jifflenow/brightui/button'\nimport { ModalSpinner } from '@jifflenow/brightui/modal-spinner'\nimport {\n  TableBuilder,\n  TableBuilderColumn,\n} from '@jifflenow/brightui/table-semantic'\nimport { Modal, ModalBody, ModalHeader, SIZE } from '@jifflenow/brightui/modal'\nimport { importTranslation } from 'rest'\nimport { useEventLocation } from 'providers/LocationProvider'\nimport { showErrorToast, showSuccessToast } from 'utils/toast'\nimport {\n  buttonOverrides,\n  statusColumnOverride,\n  viewButtonOverride,\n} from './overrides'\nimport {\n  HiddenInput,\n  IconFailure,\n  IconSuccess,\n  MessageRoot,\n  Text,\n} from './styled-components'\nimport {\n  ErrorToastContentProps,\n  ImportProps,\n  InfoModalProps,\n  RowData,\n} from './types'\n\nconst message = defineMessages({\n  languageLabel: {\n    defaultMessage: 'Language',\n    description: 'Table header',\n  },\n  importStatusLabel: {\n    defaultMessage: 'Import Status',\n    description: 'Table header',\n  },\n  onOffLabel: {\n    defaultMessage: 'On/Off',\n    description: 'Table header',\n  },\n  onLabel: {\n    defaultMessage: 'On',\n    description: 'Language status on',\n  },\n  offLabel: {\n    defaultMessage: 'Off',\n    description: 'Language status off',\n  },\n  successLabel: {\n    defaultMessage: 'Success',\n    description: 'Import status success',\n  },\n  failureLabel: {\n    defaultMessage: 'Failure',\n    description: 'Import status failure',\n  },\n  invalidLanguageLabel: {\n    defaultMessage: 'Language Not Supported',\n    description: 'Import status invalid',\n  },\n})\n\n// TODO: remove this suppression after ts update since issue is fixed in latest version.\n// https://github.com/microsoft/TypeScript/pull/45647\n// https://github.com/microsoft/TypeScript/pull/44022\n// @ts-expect-error: suppressed in interest of time.\nconst languageNames = new Intl.DisplayNames([], { type: 'language' })\n\nconst InfoModal: VFC<InfoModalProps> = ({\n  importResponse: { localeImported, localeErrored },\n  localizationData: { enabledLocales, supportedLocales },\n  onClose,\n}) => {\n  const { formatMessage } = useIntl()\n\n  const totalLocales = [...localeImported, ...localeErrored]\n\n  const data = totalLocales.map(\n    (locale): RowData => {\n      const success = localeImported.indexOf(locale) > -1\n      const enabled = enabledLocales.indexOf(locale) > -1\n      const supported = supportedLocales.indexOf(locale) > -1\n\n      return {\n        success,\n        name: supported ? languageNames?.of(locale) : locale,\n        importStatus: formatMessage(\n          message[\n            success\n              ? 'successLabel'\n              : supported\n              ? 'failureLabel'\n              : 'invalidLanguageLabel'\n          ]\n        ),\n        status: formatMessage(message[enabled ? 'onLabel' : 'offLabel']),\n      }\n    }\n  )\n\n  return (\n    <Modal isOpen size={SIZE.medium} onClose={onClose}>\n      <ModalHeader>\n        <FormattedMessage\n          defaultMessage=\"{failureCount, number} out of {totalCount, number} {totalCount, plural, one {language} other {languages}} failed to import\"\n          description=\"Toast message\"\n          values={{\n            failureCount: localeErrored.length,\n            totalCount: localeImported.length + localeErrored.length,\n          }}\n        />\n      </ModalHeader>\n      <ModalBody>\n        <TableBuilder<RowData> data={data}>\n          <TableBuilderColumn overrides={statusColumnOverride}>\n            {row =>\n              row.success ? (\n                <IconSuccess size={20} />\n              ) : (\n                <IconFailure size={20} />\n              )\n            }\n          </TableBuilderColumn>\n          <TableBuilderColumn header={formatMessage(message.languageLabel)}>\n            {row => <Text>{row.name}</Text>}\n          </TableBuilderColumn>\n          <TableBuilderColumn header={formatMessage(message.importStatusLabel)}>\n            {row => <Text>{row.importStatus}</Text>}\n          </TableBuilderColumn>\n          <TableBuilderColumn header={formatMessage(message.onOffLabel)}>\n            {row => <Text>{row.status}</Text>}\n          </TableBuilderColumn>\n        </TableBuilder>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nconst ErrorToastContent: VFC<ErrorToastContentProps> = props => {\n  const [showInfo, setShowInfo] = useState(false)\n  const { localeImported, localeErrored } = props.importResponse\n  const failedLocales = localeErrored.length\n  const totalLocales = localeImported.length + localeErrored.length\n\n  return (\n    <>\n      <MessageRoot>\n        <FormattedMessage\n          defaultMessage=\"{failureCount, number} out of {totalCount, number} {totalCount, plural, one {language} other {languages}} failed to import\"\n          description=\"Language Import failure text\"\n          values={{\n            failureCount: failedLocales,\n            totalCount: totalLocales,\n          }}\n        />\n        <Button\n          kind={KIND.secondary}\n          overrides={viewButtonOverride}\n          onClick={() => setShowInfo(true)}\n        >\n          <FormattedMessage defaultMessage=\"View\" description=\"Button label\" />\n        </Button>\n      </MessageRoot>\n      {showInfo && <InfoModal {...props} onClose={() => setShowInfo(false)} />}\n    </>\n  )\n}\n\nexport const Import: VFC<ImportProps> = props => {\n  const {\n    localizationData: { enableLocalisation },\n  } = props\n\n  const {\n    id: location_uuid,\n    attributes: { systemName: eventName },\n  } = useEventLocation().location!\n\n  const { mutate, isLoading } = useMutation(\n    importTranslation({\n      path: { eventName },\n      query: { location_uuid },\n    }),\n    {\n      onSuccess: data => {\n        data.localeErrored.length > 0\n          ? showErrorToast(\n              <ErrorToastContent importResponse={data} {...props} />,\n              {\n                autoHideDuration: 0,\n              }\n            )\n          : showSuccessToast(\n              <FormattedMessage\n                defaultMessage=\"File has been imported successfully.\"\n                description=\"Language import success message\"\n              />\n            )\n      },\n      onError: () => {\n        showErrorToast(\n          <FormattedMessage\n            defaultMessage=\"Something is not right. Please retry.\"\n            description=\"Error message\"\n          />\n        )\n      },\n    }\n  )\n\n  const fileInput = createRef<HTMLInputElement>()\n\n  const openFileDialog = () => fileInput.current?.click()\n\n  const onFilesChange = () => {\n    if (fileInput.current?.files?.length) {\n      const formData = new FormData()\n      formData.append(\n        'file',\n        fileInput.current.files[0],\n        fileInput.current.files[0].name\n      )\n      mutate(formData)\n      fileInput.current.value = ''\n    }\n  }\n\n  return (\n    <>\n      {isLoading && <ModalSpinner />}\n      <Button\n        type=\"button\"\n        overrides={buttonOverrides}\n        onClick={openFileDialog}\n        disabled={!enableLocalisation}\n      >\n        <FormattedMessage defaultMessage=\"Import\" description=\"Button label\" />\n      </Button>\n      <HiddenInput\n        type=\"file\"\n        name=\"language\"\n        ref={fileInput}\n        accept=\".csv\"\n        multiple={false}\n        onChange={onFilesChange}\n      />\n    </>\n  )\n}\n","import { VFC } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { stringifyUrl } from 'query-string'\nimport { Button, KIND } from '@jifflenow/brightui/button'\nimport { useEventLocation } from 'providers/LocationProvider'\nimport { buttonOverrides } from './overrides'\nimport { ExportProps } from './types'\n\nexport const Export: VFC<ExportProps> = ({ enabled }) => {\n  const {\n    id: location_uuid,\n    attributes: { systemName: eventName },\n  } = useEventLocation().location!\n\n  return (\n    <Button\n      {...(enabled && {\n        $as: 'a',\n        href: stringifyUrl({\n          url: `/${eventName}/api/v2/translations/export.csv`,\n          query: { location_uuid },\n        }),\n      })}\n      overrides={buttonOverrides}\n      kind={KIND.secondary}\n      disabled={!enabled}\n      // @ts-expect-error\n      download=\"translations.csv\"\n    >\n      <FormattedMessage defaultMessage=\"Export\" description=\"Button label\" />\n    </Button>\n  )\n}\n","import { VFC, ChangeEvent } from 'react'\nimport { defineMessages, useIntl } from 'react-intl'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\nimport { ModalSpinner } from '@jifflenow/brightui/modal-spinner'\nimport { getLocalizationPreferences, putLocalizationPreferences } from 'rest'\nimport { showErrorToast } from 'utils/toast'\nimport { useEventLocation } from 'providers/LocationProvider'\nimport { EventMainHeader } from 'components/EventMainHeader'\nimport { ErrorPage } from 'ui-components/ErrorPage'\nimport { LocalizationHeader } from './LocalizationHeader'\nimport { LanguageList } from './LanguageList'\nimport { LoadingShimmer } from './LoadingShimmer'\nimport { TranslationConfigResponse } from './types'\nimport { ExportContainer } from './styled-components'\nimport { Import } from './Import'\nimport { Export } from './Export'\n\nconst message = defineMessages({\n  genericError: {\n    defaultMessage: 'Something is not right. Please retry.',\n    description: 'Error message',\n  },\n})\n\nexport const Localization: VFC = () => {\n  const {\n    id: location_uuid,\n    attributes: { systemName: eventName },\n  } = useEventLocation().location!\n  const { formatMessage } = useIntl()\n\n  const queryClient = useQueryClient()\n  const queryProps = {\n    path: { eventName },\n    query: {\n      location_uuid,\n    },\n  } as const\n\n  const { data: localizationData, isLoading, error, refetch } = useQuery(\n    ['localization', queryProps],\n    getLocalizationPreferences\n  )\n\n  const { isLoading: isMutating, mutate } = useMutation(\n    putLocalizationPreferences(queryProps),\n    {\n      onMutate: async ({ locales: enabledLocales, enableLocalisation }) => {\n        await queryClient.cancelQueries(['localization', queryProps])\n\n        const previousState: TranslationConfigResponse = queryClient.getQueryData(\n          ['localization', queryProps]\n        )!\n\n        queryClient.setQueryData(['localization', queryProps], {\n          ...previousState,\n          enabledLocales,\n          enableLocalisation,\n        })\n\n        return { previousState }\n      },\n      onError: (err, _, context) => {\n        showErrorToast(formatMessage(message.genericError))\n        queryClient.setQueryData(\n          ['localization', queryProps],\n          // @ts-expect-error: suppressed in interest of time.\n          context.previousState\n        )\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries(['localization', queryProps])\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <LoadingShimmer />\n  }\n\n  if (error) {\n    return <ErrorPage onButtonClick={() => refetch()} />\n  }\n\n  if (localizationData) {\n    return (\n      <>\n        {isMutating && <ModalSpinner />}\n        <EventMainHeader />\n        <LocalizationHeader\n          checked={localizationData.enableLocalisation}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            mutate({\n              locales: localizationData.enabledLocales,\n              enableLocalisation: e.target.checked,\n            })\n          }}\n        />\n        <ExportContainer>\n          <Export enabled={localizationData.enableLocalisation} />\n          <Import localizationData={localizationData} />\n        </ExportContainer>\n        <LanguageList\n          localizationData={localizationData}\n          onChange={(language: string, add: boolean) => {\n            const { enabledLocales, enableLocalisation } = localizationData\n            const updatedLocales = add\n              ? [...enabledLocales, language]\n              : enabledLocales.filter(lang => lang !== language)\n            mutate({\n              locales: updatedLocales,\n              enableLocalisation,\n            })\n          }}\n        />\n      </>\n    )\n  }\n\n  return null\n}\n"],"names":["message","defineMessages","localization","defaultMessage","LocalizationToggle","checked","onChange","formatMessage","useIntl","name","ariaLabel","LocalizationHeader","props","Root","Container","Title","PageHint","RightContainer","FieldToggleWrapper","styled","sizing","$theme","display","alignItems","justifyContent","paddingTop","scale600","paddingBottom","paddingLeft","scale800","paddingRight","scale200","FieldSeparator","borderBottomColor","colors","mono300","borderBottomStyle","borderBottomWidth","FieldLabelContainer","marginRight","scale400","marginLeft","FieldLabel","typography","Paragraph2","color","mono900","TableHeader","LabelLarge","mono800","marginBottom","ExportContainer","scale750","HiddenInput","MessageRoot","Text","LabelSmall","IconSuccess","CheckCircleOutlined","positive","backgroundColor","positive50","borderRadius","IconFailure","CloseCircleOutlined","negative","negative50","languageNames","Intl","DisplayNames","type","Language","language","disabled","label","of","e","target","LanguageList","localizationData","supportedLocales","enabledLocales","enableLocalisation","map","index","indexOf","Body","flexDirection","flexGrow","LoadingShimmer","useStyletron","theme","loaderOptions","speed","primaryColor","mono200","secondaryColor","width","height","viewBox","y","x","rx","ry","buttonOverrides","BaseButton","style","minWidth","scale300","viewButtonOverride","statusColumnOverride","TableHeadCell","TableBodyCell","languageLabel","importStatusLabel","onOffLabel","onLabel","offLabel","successLabel","failureLabel","invalidLanguageLabel","InfoModal","importResponse","localeImported","localeErrored","onClose","data","locale","success","enabled","supported","importStatus","status","isOpen","size","SIZE","values","failureCount","length","totalCount","overrides","row","header","ErrorToastContent","useState","showInfo","setShowInfo","failedLocales","totalLocales","kind","KIND","onClick","Import","useEventLocation","location","location_uuid","id","eventName","attributes","systemName","useMutation","importTranslation","path","query","onSuccess","showErrorToast","autoHideDuration","showSuccessToast","onError","mutate","isLoading","fileInput","createRef","current","click","ref","accept","multiple","files","formData","FormData","append","value","Export","$as","href","stringifyUrl","url","download","genericError","Localization","queryClient","useQueryClient","queryProps","useQuery","getLocalizationPreferences","error","refetch","putLocalizationPreferences","onMutate","locales","cancelQueries","previousState","getQueryData","setQueryData","err","_","context","onSettled","invalidateQueries","isMutating","ErrorPage","onButtonClick","EventMainHeader","add","updatedLocales","filter","lang"],"sourceRoot":""}