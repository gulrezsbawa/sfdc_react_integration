{"version":3,"file":"static/js/728.cff87bd1.chunk.js","mappings":"2QAEaA,GAASC,E,QAAAA,IAAO,UAAU,gBAAaC,EAAM,EAAhBC,OAAUD,OAAM,MAAU,CAClEE,YAAaF,EAAOG,SACpBC,aAAcJ,EAAOG,SACrBE,WAAYL,EAAOM,SACnBC,cAAeP,EAAOM,SACvB,I,WCFYR,EAAc,WAAH,OACtB,UAAC,EAAY,YACX,SAAC,EAAAU,MAAK,WACJ,SAAC,IAAgB,aACfC,eAAc,qCAIlB,SAAC,EAAAC,SAAQ,WACP,SAAC,IAAgB,aACfD,eAAc,6CAIL,E,yECPJE,EAAiD,SAAH,GAGpD,IAFLC,EAAW,EAAXA,YACAC,EAAO,EAAPA,QAEMC,OAA0CC,IAA9BH,EAAYI,MAAMC,QAEpC,OACE,UAAC,KAAe,WACbH,GAAY,SAAC,KAAS,CAACI,KAAM,MAAS,SAAC,KAAU,CAACA,KAAM,MACzD,SAAC,KAAU,UACRJ,GACC,SAAC,IAAgB,aACfL,eAAc,8DAIhB,SAAC,IAAgB,aACfA,eAAc,+CAKnBK,IACC,SAAC,KAAW,CAACK,KAAK,SAASC,KAAMC,EAAAA,GAAAA,UAAgBC,QAAST,EAAQ,UAChE,SAAC,IAAgB,aAACJ,eAAc,+BAK1C,E,uDCxBMc,GAAWC,EAAAA,EAAAA,IAAe,CAC9BC,WAAY,CAAC,GAAD,SACVhB,eAAe,CAAD,+BAGhBiB,aAAc,CAAC,GAAD,SACZjB,eAAe,CAAD,iCAGhBkB,aAAc,CAAC,GAAD,SACZlB,eAAe,CAAD,yDAGhBmB,gBAAiB,CAAC,GAAD,SACfnB,eAAe,CAAD,mEAGhBoB,cAAe,CAAC,GAAD,SACbpB,eAAe,CAAD,mEAKZqB,GAAON,EAAAA,EAAAA,IAAe,CAC1BO,qBAAsB,CAAC,GAAD,SACpBtB,eAAe,CAAD,6CAKZuB,EAA6B,SAAAC,GAAI,eAA0B,QAA1B,GAAI,EAAAA,EAAKC,MAAKF,oBAAY,aAAtB,SAAyBC,EAAK,EAEnEE,EAAqD,SAAH,GAIjD,IAHLC,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACAxB,EAAO,EAAPA,QAEQyB,GAAkBC,EAAAA,EAAAA,KAAlBD,cAER,GAGIE,EAAAA,EAAAA,MAAmBC,SAAQ,IAF7BC,GAAIC,OAAa,MAAG,GAAE,EACIC,EAAS,EAAnCC,WAAcC,WAGAC,GAAiBC,EAAAA,EAAAA,aAC/B,+BACAC,EAAAA,EAAAA,6BAA4B,CAC1BC,KAAM,CAAEN,UAAAA,EAAWO,gBAAiBf,EAAKgB,QAE3C,CACEC,UAAW,YAAyB,IAAhBC,EAAQ,EAAdlB,KACZvB,IACAwB,EAAIkB,cACJD,EAASE,kBAAkBC,SACzBC,EAAAA,EAAAA,IACEpB,EACEf,EAASa,EAAKuB,QAAU,kBAAoB,iBAC5C,CAAEC,KAAMxB,EAAKyB,mBAGrB,EACAC,QAAS,WACPzB,EAAIkB,eACJQ,EAAAA,EAAAA,IAAezB,EAAcf,EAASI,cACxC,IApBIqC,OAwBFC,EAAe,WACnB5B,EAAI6B,qBACJnB,EAAa,CACXoB,QAAS/B,EAAKuB,QACdS,sBAAuBzB,GAE3B,EAEM0B,EAAqB,EACxBjC,EAAKuB,SAAW,CACfW,MAAOhC,EAAcf,EAASE,YAC9BO,aAAciC,EACdM,UAAW,+BAEbnC,EAAKuB,SAAW,CACdW,MAAOhC,EAAcf,EAASG,cAC9BM,aAAciC,EACdM,UAAW,kCAEbC,OAAOC,SAET,OACE,SAAC,IAAY,CACXC,MAAOL,EACPrC,aAAcA,EACd2C,UAAWC,EAAAA,IAGjB,EAEaC,EAAwD,SAAA7D,GACnE,IAAQsB,GAAkBC,EAAAA,EAAAA,KAAlBD,cAER,OACE,SAAC,KAAe,CACdwC,cAAe,EACfC,SAAS,SAAC5C,GAAO,UAAKnB,IACtBgE,UAAWC,EAAAA,GAAAA,YACXN,UAAWO,EAAAA,GAAiB,UAE5B,SAAC,KAAU,CACThE,KAAM,GACNyD,UAAWQ,EAAAA,GACX,aAAY7C,EAAcR,EAAKC,sBAAsB,UAErD,SAAC,MAAS,OAIlB,EC/HaqD,GAET5D,EAAAA,EAAAA,IAA2E,CAC7EqC,iBAAkB,CAAC,GAAD,SAChBpD,eAAe,CAAD,wBAGhBkD,QAAS,CAAC,GAAD,SACPlD,eAAe,CAAD,4BAKL4E,EAAuB,CAClC,CACEC,MAAO,mBACPC,UAAU,GAEZ,CACED,MAAO,UACPC,UAAU,EACVC,aAAc,cAEhB,CACEF,MAAO,UACPG,OAAQ,QACRC,WAAW,EACXC,SAAU,GACVH,aAAc,aACdI,gBAAiB,eACjBC,sBAAuB,CAAET,kBAAAA,KAIhBU,EAAkC,CAC7CC,cAAe,CACbC,YAAY,EACZN,WAAW,GAEbO,UAAW,aACXC,yBAAyB,EACzBC,uBAAuB,EACvBC,wBAAyB,aACzBC,uBAAwB,kBCpCbC,EAAuB,SAAH,GAAuC,IAAjCC,EAAU,EAAVA,WAAYnE,EAAI,EAAJA,KAAMvB,EAAO,EAAPA,QAC/CyB,GAAkBC,EAAAA,EAAAA,KAAlBD,cAOR,OACE,SAAC,KAAI,CAACkE,UAAU,kBAAiB,UAC/B,SAAC,EAAAC,aAAW,kBACNX,GAAkB,IACtB7E,QAASmB,EACTiD,WAAYA,EAAWqB,KAAI,SAAAC,GAAM,iCAC5BA,GACCA,EAAOrB,OAASF,EAAkBuB,EAAOrB,OACzC,CAAEsB,WAAYtE,EAAc8C,EAAkBuB,EAAOrB,SACrD,MACAqB,EAAOrB,OAA0B,YAAjBqB,EAAOrB,MACvB,CACEuB,mBAAoB,CAClBhG,QAAAA,IAGJ,KAAI,IAEViG,QAAS,CAACC,EAAAA,GACVC,YAxBkB,SAAH,GAA8B,IAAxB3E,EAAG,EAAHA,IACzBA,EAAI4E,mBACJV,EAAWlE,EACb,EAsBM6E,oBAAqB,CACnBC,WAAYC,EAAAA,WACZC,WAAYxC,EACZyC,aAAcC,EAAAA,GACdC,eAAgB7G,EAChB8G,WAAYC,EAAAA,IAEdC,6BAA8B,CAAE9G,QAAAA,OAIxC,ECzCa+G,EAAoB,WAC/B,OAA8BC,EAAAA,EAAAA,UAAyB,MAAK,eAArDC,EAAO,KAAEvB,EAAU,KAE1B,GAAqD/D,EAAAA,EAAAA,MAA7CC,EAAQ,EAARA,SAAsBsF,EAAkB,EAA9BC,WAClB,EAGIvF,GAAY,CAAC,EAAC,IAFhBC,GAAIC,OAAa,MAAG,GAAE,MACtBE,WAFF,gBAE+C,CAAC,EAAC,GAAjCC,WAAYF,OAAS,MAAG,GAAE,EAG1C,GAKIqF,EAAAA,EAAAA,0BACF,CACE/E,KAAM,CAAEN,UAAAA,GACRsF,MAAO,CACL9D,sBAAuBzB,IAG3B,CACEgB,QAA2B,OAAlBoE,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBI,sBAC7B9E,UAAW,kBAAa,OAAPyE,QAAO,IAAPA,OAAO,EAAPA,EAASvE,aAAa,EACvCO,QAAS,kBAAa,OAAPgE,QAAO,IAAPA,OAAO,EAAPA,EAASM,mBAAmB,IAdvCC,EAAY,EAAlBjG,KACAkG,EAAS,EAATA,UACAC,EAAU,EAAVA,WACA1H,EAAO,EAAPA,QAmBF,OAJIyH,GAAaC,KACR,OAAPT,QAAO,IAAPA,GAAAA,EAAS5D,uBAIT,iCACE,SAACsE,EAAA,EAAe,KAChB,SAAC1I,EAAM,KACP,SAACwG,EAAI,CACHC,WAAYA,EACZnE,KAAkB,OAAZiG,QAAY,IAAZA,OAAY,EAAZA,EAAcjG,KAAKiG,aACzBxH,QAASA,MAIjB,C","sources":["components/Integrations/Header/styled-components.ts","components/Integrations/Header/Header.tsx","components/Integrations/List/NoRowsAndError.tsx","components/Integrations/List/ActionCell.tsx","components/Integrations/List/constants.ts","components/Integrations/List/List.tsx","components/Integrations/Integrations.tsx"],"sourcesContent":["import { styled } from '@jifflenow/brightui'\n\nexport const Header = styled('header', ({ $theme: { sizing } }) => ({\n  paddingLeft: sizing.scale800,\n  paddingRight: sizing.scale800,\n  paddingTop: sizing.scale200,\n  paddingBottom: sizing.scale200,\n}))\n","import { VFC } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { Title, PageHint } from 'components/EngagementTypes'\nimport { Header as StyledHeader } from './styled-components'\n\nexport const Header: VFC = () => (\n  <StyledHeader>\n    <Title>\n      <FormattedMessage\n        defaultMessage=\"Integrations\"\n        description=\"Section title\"\n      />\n    </Title>\n    <PageHint>\n      <FormattedMessage\n        defaultMessage=\"Manage Integrations\"\n        description=\"Section sub title\"\n      />\n    </PageHint>\n  </StyledHeader>\n)\n","import { FC } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { KIND } from '@jifflenow/brightui/button'\nimport {\n  NoRowsIcon,\n  ErrorIcon,\n  NoRowsContainer,\n  NoRowsText,\n  ButtonRetry,\n} from 'components/ag-grid'\nimport { NoRowsAndErrorOverlayProps } from './types'\n\nexport const NoRowsAndError: FC<NoRowsAndErrorOverlayProps> = ({\n  agGridReact,\n  refetch,\n}) => {\n  const showError = agGridReact.props.rowData === undefined\n\n  return (\n    <NoRowsContainer>\n      {showError ? <ErrorIcon size={93} /> : <NoRowsIcon size={93} />}\n      <NoRowsText>\n        {showError ? (\n          <FormattedMessage\n            defaultMessage=\"Something went wrong. Please try again.\"\n            description=\"Error message\"\n          />\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"No integrations to show\"\n            description=\"Empty state of the list\"\n          />\n        )}\n      </NoRowsText>\n      {showError && (\n        <ButtonRetry type=\"button\" kind={KIND.secondary} onClick={refetch}>\n          <FormattedMessage defaultMessage=\"Retry\" description=\"Button label\" />\n        </ButtonRetry>\n      )}\n    </NoRowsContainer>\n  )\n}\n","import { FC } from 'react'\nimport { defineMessages, useIntl } from 'react-intl'\nimport { ICellRendererParams } from '@ag-grid-community/core'\nimport { PLACEMENT, StatefulPopover } from '@jifflenow/brightui/popover'\nimport { StatefulMenu, OnItemSelect } from '@jifflenow/brightui/menu'\nimport { IconButton } from '@jifflenow/brightui/button'\nimport { ThreeDots } from '@jifflenow/brightui/icon'\nimport {\n  ThreeDotButtonOverrides,\n  InlineMenuOverrides,\n  PopoverOverrides,\n} from 'components/ag-grid'\nimport { updateSelfServeIntegrations, useMutation } from 'rest'\nimport { showErrorToast, showSuccessToast } from 'utils/toast'\nimport { useEventLocation } from 'providers/LocationProvider'\nimport { ActionCellProps, ActionItem } from './types'\n\nconst messages = defineMessages({\n  makeActive: {\n    defaultMessage: 'Make Active',\n    description: 'Grid row action label',\n  },\n  makeInactive: {\n    defaultMessage: 'Make Inactive',\n    description: 'Grid row action label',\n  },\n  genericError: {\n    defaultMessage: 'Something is not right. Please retry.',\n    description: 'Error message',\n  },\n  inactiveSuccess: {\n    defaultMessage: '{name} inactivated successfully',\n    description: 'Grid row action label',\n  },\n  activeSuccess: {\n    defaultMessage: '{name} activated successfully',\n    description: 'Grid row action label',\n  },\n})\n\nconst aria = defineMessages({\n  labelIntegrationMore: {\n    defaultMessage: 'Integration more option',\n    description: 'Actions on this integration',\n  },\n})\n\nconst onItemSelect: OnItemSelect = args => args.item.onItemSelect?.(args)\n\nconst Content: FC<ICellRendererParams & ActionCellProps> = ({\n  data,\n  api,\n  refetch,\n}) => {\n  const { formatMessage } = useIntl()\n\n  const {\n    id: location_uuid = '',\n    attributes: { systemName: eventName },\n  } = useEventLocation().location!\n\n  const { mutate: mutateStatus } = useMutation(\n    'updateSelfServeIntegrations',\n    updateSelfServeIntegrations({\n      path: { eventName, integrationUuid: data.uuid },\n    }),\n    {\n      onSuccess: ({ data: response }) => {\n        refetch()\n        api.hideOverlay()\n        response.integration_users.length &&\n          showSuccessToast(\n            formatMessage(\n              messages[data.enabled ? 'inactiveSuccess' : 'activeSuccess'],\n              { name: data.integration_name }\n            )\n          )\n      },\n      onError: () => {\n        api.hideOverlay()\n        showErrorToast(formatMessage(messages.genericError))\n      },\n    }\n  )\n\n  const updateStatus = () => {\n    api.showLoadingOverlay()\n    mutateStatus({\n      active: !data.enabled,\n      current_location_uuid: location_uuid,\n    })\n  }\n\n  const menu: ActionItem[] = [\n    !data.enabled && {\n      label: formatMessage(messages.makeActive),\n      onItemSelect: updateStatus,\n      dataPendo: 'engagement-type/make-active',\n    },\n    data.enabled && {\n      label: formatMessage(messages.makeInactive),\n      onItemSelect: updateStatus,\n      dataPendo: 'engagement-type/make-inactive',\n    },\n  ].filter(Boolean) as ActionItem[]\n\n  return (\n    <StatefulMenu\n      items={menu}\n      onItemSelect={onItemSelect}\n      overrides={InlineMenuOverrides}\n    />\n  )\n}\n\nexport const ActionCell: FC<ICellRendererParams & ActionCellProps> = props => {\n  const { formatMessage } = useIntl()\n\n  return (\n    <StatefulPopover\n      popoverMargin={8}\n      content={<Content {...props} />}\n      placement={PLACEMENT.bottomRight}\n      overrides={PopoverOverrides}\n    >\n      <IconButton\n        size={20}\n        overrides={ThreeDotButtonOverrides}\n        aria-label={formatMessage(aria.labelIntegrationMore)}\n      >\n        <ThreeDots />\n      </IconButton>\n    </StatefulPopover>\n  )\n}\n","import { defineMessages, MessageDescriptor } from 'react-intl'\nimport { ColDef } from '@ag-grid-community/core'\nimport { GridOptions } from '@ag-grid-community/core'\nimport { components } from 'types/openapi'\n\ntype Integration = components['schemas']['Integration']\n\nexport const columnHeaderNames: {\n  [key: string]: MessageDescriptor\n} = defineMessages<Extract<keyof Integration, 'integration_name' | 'enabled'>>({\n  integration_name: {\n    defaultMessage: 'Name',\n    description: 'Column header name',\n  },\n  enabled: {\n    defaultMessage: 'Status',\n    description: 'Column header name',\n  },\n})\n\nexport const columnDefs: ColDef[] = [\n  {\n    field: 'integration_name',\n    sortable: false,\n  },\n  {\n    field: 'enabled',\n    sortable: false,\n    cellRenderer: 'statusCell',\n  },\n  {\n    field: 'actions',\n    pinned: 'right',\n    resizable: false,\n    maxWidth: 50,\n    cellRenderer: 'actionCell',\n    headerComponent: 'actionHeader',\n    headerComponentParams: { columnHeaderNames },\n  },\n]\n\nexport const defaultGridOptions: GridOptions = {\n  defaultColDef: {\n    lockPinned: true,\n    resizable: true,\n  },\n  domLayout: 'autoHeight',\n  enableCellTextSelection: true,\n  suppressCellSelection: true,\n  loadingOverlayComponent: 'listLoader',\n  noRowsOverlayComponent: 'noRowsAndError',\n}\n","import { VFC } from 'react'\nimport { useIntl } from 'react-intl'\nimport { AgGridReact } from '@ag-grid-community/react'\nimport { AgGridEvent } from '@ag-grid-community/core'\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model'\nimport '@jifflenow/brightui/ag-grid/scss/ag-theme-bright.scss'\nimport '@ag-grid-community/core/dist/styles/ag-grid.css'\nimport { Root, ListLoader, ActionHeader } from 'components/ag-grid'\nimport { StatusCell } from 'components/EngagementTypes'\nimport { NoRowsAndError } from './NoRowsAndError'\nimport { ActionCell } from './ActionCell'\nimport { columnDefs, columnHeaderNames, defaultGridOptions } from './constants'\nimport { ListProps } from './types'\n\nexport const List: VFC<ListProps> = ({ setGridApi, data, refetch }) => {\n  const { formatMessage } = useIntl()\n\n  const handleGridReady = ({ api }: AgGridEvent) => {\n    api.sizeColumnsToFit()\n    setGridApi(api)\n  }\n\n  return (\n    <Root className=\"ag-theme-bright\">\n      <AgGridReact\n        {...defaultGridOptions}\n        rowData={data}\n        columnDefs={columnDefs.map(column => ({\n          ...column,\n          ...(column.field && columnHeaderNames[column.field]\n            ? { headerName: formatMessage(columnHeaderNames[column.field]) }\n            : null),\n          ...(column.field && column.field === 'actions'\n            ? {\n                cellRendererParams: {\n                  refetch,\n                },\n              }\n            : null),\n        }))}\n        modules={[ClientSideRowModelModule]}\n        onGridReady={handleGridReady}\n        frameworkComponents={{\n          statusCell: StatusCell,\n          actionCell: ActionCell,\n          actionHeader: ActionHeader,\n          noRowsAndError: NoRowsAndError,\n          listLoader: ListLoader,\n        }}\n        noRowsOverlayComponentParams={{ refetch }}\n      />\n    </Root>\n  )\n}\n","import { useState, VFC } from 'react'\nimport { GridApi } from '@ag-grid-community/core'\nimport '@ag-grid-community/core/dist/styles/ag-grid.css'\nimport { EventMainHeader } from 'components/EventMainHeader'\nimport { useSelfServeIntegrations } from 'rest'\nimport { useEventLocation } from 'providers/LocationProvider'\nimport { components } from 'types/openapi'\nimport { Header } from './Header'\nimport { List } from './List'\n\ntype SelfServeIntegrations = components['schemas']['Integrations']['data']['integrations']\n\nexport const Integrations: VFC = () => {\n  const [gridApi, setGridApi] = useState<GridApi | null>(null)\n\n  const { location, privileges: locationPrivileges } = useEventLocation()\n  const {\n    id: location_uuid = '',\n    attributes: { systemName: eventName = '' } = {},\n  } = location || {}\n\n  const {\n    data: integrations,\n    isLoading,\n    isFetching,\n    refetch,\n  } = useSelfServeIntegrations(\n    {\n      path: { eventName },\n      query: {\n        current_location_uuid: location_uuid,\n      },\n    },\n    {\n      enabled: locationPrivileges?.canManageIntegrations,\n      onSuccess: () => gridApi?.hideOverlay(),\n      onError: () => gridApi?.showNoRowsOverlay(),\n    }\n  )\n\n  if (isLoading || isFetching) {\n    gridApi?.showLoadingOverlay()\n  }\n\n  return (\n    <>\n      <EventMainHeader />\n      <Header />\n      <List\n        setGridApi={setGridApi}\n        data={integrations?.data.integrations as SelfServeIntegrations}\n        refetch={refetch}\n      />\n    </>\n  )\n}\n"],"names":["Header","styled","sizing","$theme","paddingLeft","scale800","paddingRight","paddingTop","scale200","paddingBottom","Title","defaultMessage","PageHint","NoRowsAndError","agGridReact","refetch","showError","undefined","props","rowData","size","type","kind","KIND","onClick","messages","defineMessages","makeActive","makeInactive","genericError","inactiveSuccess","activeSuccess","aria","labelIntegrationMore","onItemSelect","args","item","Content","data","api","formatMessage","useIntl","useEventLocation","location","id","location_uuid","eventName","attributes","systemName","mutateStatus","useMutation","updateSelfServeIntegrations","path","integrationUuid","uuid","onSuccess","response","hideOverlay","integration_users","length","showSuccessToast","enabled","name","integration_name","onError","showErrorToast","mutate","updateStatus","showLoadingOverlay","active","current_location_uuid","menu","label","dataPendo","filter","Boolean","items","overrides","InlineMenuOverrides","ActionCell","popoverMargin","content","placement","PLACEMENT","PopoverOverrides","ThreeDotButtonOverrides","columnHeaderNames","columnDefs","field","sortable","cellRenderer","pinned","resizable","maxWidth","headerComponent","headerComponentParams","defaultGridOptions","defaultColDef","lockPinned","domLayout","enableCellTextSelection","suppressCellSelection","loadingOverlayComponent","noRowsOverlayComponent","List","setGridApi","className","AgGridReact","map","column","headerName","cellRendererParams","modules","ClientSideRowModelModule","onGridReady","sizeColumnsToFit","frameworkComponents","statusCell","StatusCell","actionCell","actionHeader","ActionHeader","noRowsAndError","listLoader","ListLoader","noRowsOverlayComponentParams","Integrations","useState","gridApi","locationPrivileges","privileges","useSelfServeIntegrations","query","canManageIntegrations","showNoRowsOverlay","integrations","isLoading","isFetching","EventMainHeader"],"sourceRoot":""}